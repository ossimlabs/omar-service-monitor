buildscript {
  ext {
    grailsVersion = project.grailsVersion
    baseImage = "omar-base"
  }
  if(System.env.OMAR_COMMON_PROPERTIES)
  {
    apply from: System.env.OMAR_COMMON_PROPERTIES
  }
  repositories {
    maven { url "${ossimMavenProxy}" }
    if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
  }
  dependencies {
    // classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    // classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    // classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    // classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    // classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineGradleV"
    // classpath "net.errbuddy.plugins:babel-asset-pipeline:${babelAssetPipelineV}"
    // classpath "org.grails.plugins:views-gradle:1.1.6"
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.8"
    classpath "org.grails.plugins:views-gradle:1.1.6"
  }
}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"
    id "org.sonarqube" version "2.6.2"
}

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-web"
apply plugin:"com.moowork.node"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"org.grails.plugins.views-json"

apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"

group "omar.services.dashboard"

ext {
  grailsVersion = project.grailsVersion
  gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
  // maven { url  "http://dl.bintray.com/dmahapatro/plugins" }
  maven { url "${ossimMavenProxy}" }
  if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
  }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudDependencyV}"
  }
  applyMavenExclusions false
}

grails {
  plugins {
      compile project(':omar-core-plugin')
      compile project(':omar-hibernate-spatial-plugin')
  }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails:grails-plugin-gsp"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:gsp"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    console "org.grails:grails-console"
    profile "org.grails.profiles:react-webpack"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.8"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb:1.1.2"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.1"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

// bootRun {
//     jvmArgs('-Dspring.output.ansi.enabled=always')
//     addResources = true
//     String springProfilesActive = 'spring.profiles.active'
//     systemProperty springProfilesActive, System.getProperty(springProfilesActive)
// }
bootRun {
    jvmArgs = [
    ]
}
node {
    version = '7.10.0'
    yarnVersion = '0.21.3'
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
}

task bundle(type: YarnTask, dependsOn: 'yarn') {
    group = 'build'
    description = 'Build the client bundle'
    args = ['run', 'bundle']
}

task webpack(type: YarnTask, dependsOn: 'yarn') {
    group = 'application'
    description = 'Build the client bundle in watch mode'
    args = ['run', 'start']
}

bootRun.dependsOn(['bundle'])
assetCompile.dependsOn(['bundle'])

task mochaTest(type: YarnTask, dependsOn: 'yarn') {
    group = 'verification'
    description = 'Run the client tests'
    args = ['run', 'test']
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

assets {
    minifyJs = true
    minifyCss = true
}
