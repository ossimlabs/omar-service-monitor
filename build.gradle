buildscript {
    repositories {
        mavenLocal()
        maven { url ossimMavenProxy }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
        classpath "org.grails.plugins:views-gradle:1.1.6"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.12'
        classpath "io.ossim:gradleDefaults:${gradleDefaultsVersion}"
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"//0.21.0
    id "org.sonarqube" version "2.6.2"
}

subprojects { project ->
	// version projectVersion
	//group projectGroup

	boolean isGrailsApp = project.name.endsWith( '-app' )
	boolean isGrailsPlugin = project.name.endsWith( '-plugin' )
	boolean isGrailsProject = isGrailsApp || isGrailsPlugin

    apply plugin:"eclipse"
    apply plugin:"idea"
    apply plugin:"org.grails.grails-web"
    apply plugin:"org.grails.grails-gsp"
    apply plugin:"asset-pipeline"

    apply plugin: "java"

    // Needed for the react.js stuffs
    apply plugin:"com.moowork.node"
    apply plugin:"org.grails.plugins.views-json"


    io.ossim.gradleDefaults.Variables.setAdditionalVariables(project)
    io.ossim.gradleDefaults.Variables.setVersionVariables(project)
    version "${buildVersion}-${buildVersionTag}"

        //afterEvaluate {
            project.apply plugin: 'maven-publish'
            
            project.publish.dependsOn assemble
            project.publishToMavenLocal.dependsOn assemble
            //project.sourceSets.main.output.classesDir = 'build/classes/groovy/main'

            /* project.publishing {
                repositories {
                    maven {
                        url = mavenPublishUrl ?: System.getenv( 'MAVEN_PUBLISH_URL' )
                        credentials {
                            username mavenRepoUsername ?: System.getenv( 'MAVEN_REPO_USERNAME' )
                            password mavenRepoPassword ?: System.getenv( 'MAVEN_REPO_PASSWORD' )
                        }
                    }
                }
                publications {
                    mavenJava( MavenPublication ) {
                        from project.components.java
                    }
                }
            }*/
        //}                    

    jarDestination = "${project.projectDir}/build/libs/${project.name}-${version}.jar"

    if ( isGrailsApp )        
    {
        dockerBuildDir="${rootProject.projectDir}/docker"
        io.ossim.gradleDefaults.Docker.addDockerTasks(project, dockerRegistryUrl, dockerRegistryUsername, dockerRegistryPassword, name, dockerImageTag, dockerBuildDir, jarDestination, ["BASE_IMAGE": "${dockerRegistryUrl}/${dockerBaseImage}:${dockerFromTag}"])
        io.ossim.gradleDefaults.Openshift.addOpenshiftTasks(project, openshiftUrl, openshiftUsername, openshiftPassword, openshiftProjectName, openshiftServiceName,  dockerRegistryUrl, name, dockerImageTag)
    }
    else if ( isGrailsPlugin )
    {
        //sourceSets.main.output.classesDir = 'build/classes/groovy/main'

        // io.ossim.gradleDefaults.Publications.addPublication(
        //    project, 
        //    groupName, 
        //    name, "${buildVersion}-${buildVersionTag}"
        //    )
        // io.ossim.gradleDefaults.Publications.addRepository(
        //    project, 
        //    mavenPublishUrl, 
        //    mavenRepoUsername, 
        //    mavenRepoPassword
        //    )
    }    

	if ( isGrailsProject )
	{
		if ( isGrailsApp )
		{
            apply plugin:"org.grails.grails-web"
            //apply plugin:"com.energizedwork.webdriver-binaries"
            //apply plugin:"com.energizedwork.idea-project-components"
		}
		else if ( isGrailsPlugin )
		{ 
            apply plugin:"org.grails.grails-plugin"
            apply plugin:"org.grails.grails-plugin-publish"
        }

        apply plugin:"asset-pipeline"
        apply plugin:"org.grails.grails-gsp"

        repositories {
            mavenLocal()
		    maven { url ossimMavenProxy } 
            maven { url "https://repo.grails.org/grails/core" }
        }

        dependencyManagement {
			imports {
				mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependencyV}"
			}
		}

        dependencyManagement {
            imports {
                //mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Dalston.SR5"
                mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Edgware.SR4"
            }
            applyMavenExclusions false
        }

        dependencies {
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"
            compile "org.springframework.boot:spring-boot-starter-actuator"
            compile "org.springframework.boot:spring-boot-starter-tomcat"
            compile "org.grails:grails-web-boot"
            compile "org.grails:grails-logging"
            compile "org.grails:grails-plugin-rest"
            compile "org.grails:grails-plugin-databinding"
            compile "org.grails:grails-plugin-i18n"
            compile "org.grails:grails-plugin-services"
            compile "org.grails:grails-plugin-url-mappings"
            compile "org.grails:grails-plugin-interceptors"
            compile "org.grails.plugins:cache"
            compile "org.grails.plugins:async"
            compile "org.grails.plugins:scaffolding"
            compile "org.grails.plugins:gsp"
            console "org.grails:grails-console"
            testCompile "org.grails:grails-gorm-testing-support"
            testCompile "org.grails:grails-web-testing-support"
            runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineVersion}"

            if ( isGrailsApp )
            {
                compile "org.grails.plugins:events"
                compile "org.grails.plugins:hibernate5"
                compile "org.hibernate:hibernate-core:${hibernateCoreV}"
                compile "org.grails.plugins:views-json"
                compile "org.grails.plugins:views-json-templates"
                profile "org.grails.profiles:web"
                profile "org.grails.profiles:react-webpack"
                runtime "org.glassfish.web:el-impl:${elImplV}"
                runtime "com.h2database:h2"
                runtime "org.apache.tomcat:tomcat-jdbc"
                testCompile "org.grails.plugins:geb"//1.1.2
                testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumHtmlUnitDriverV}"
                testRuntime "org.seleniumhq.selenium:selenium-api:${seleniumHtmlUnitDriverV}"
                testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

				compile "org.springframework.cloud:spring-cloud-starter-config"
				compile "org.springframework.cloud:spring-cloud-starter-eureka"
            }
            else if ( isGrailsPlugin )
            { 
                profile "org.grails.profiles:web-plugin"
                provided "org.grails:grails-plugin-services"
                provided "org.grails:grails-plugin-domain-class"
                testCompile "org.grails:grails-plugin-testing"
            }
        }
         
        bootRun {
            jvmArgs('-Dspring.output.ansi.enabled=always')
            addResources = true
            String springProfilesActive = 'spring.profiles.active'
            systemProperty springProfilesActive, System.getProperty(springProfilesActive)
        }
        node {
            version = '7.10.0'
            yarnVersion = '0.21.3'
            distBaseUrl = 'https://nodejs.org/dist'
            download = true
        }

        

        assets {
            if ( isGrailsApp )
            {
                minifyJs = true
                minifyCss = true
            }
            else if ( isGrailsPlugin )
            { 
                packagePlugin = true
            }
        }
        task bundle(type: YarnTask, dependsOn: 'yarn') {
            group = 'build'
            description = 'Build the client bundle'
            args = ['run', 'bundle']
        }

        task webpack(type: YarnTask, dependsOn: 'yarn') {
            group = 'application'
            description = 'Build the client bundle in watch mode'
            args = ['run', 'start']
        }

        bootRun.dependsOn(['bundle'])
        assetCompile.dependsOn(['bundle'])

        task mochaTest(type: YarnTask, dependsOn: 'yarn') {
            group = 'verification'
            description = 'Run the client tests'
            args = ['run', 'test']
        }

        tasks.withType(Test) {
            systemProperty "geb.env", System.getProperty('geb.env')
            systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
            systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
            systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
        }
    }
}
